knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list = ls())
options(warn = -1)
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggplot2)
library(aida)
theme_set(theme_aida())
##################################################
## CSP-colors
##################################################
CSP_colors = c(
"#7581B3", "#99C2C2", "#C65353", "#E2BA78", "#5C7457", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
# setting theme colors globally
scale_colour_discrete <- function(...) {
scale_colour_manual(..., values = CSP_colors)
}
scale_fill_discrete <- function(...) {
scale_fill_manual(..., values = CSP_colors)
}
data <- read.csv("../data/results.csv")
data <- data %>% group_by(submission_id, informationSource) %>%
summarize(
decision1 = first(na.omit(decision1)),
decision2 = first(na.omit(decision2))
) %>%
mutate(update = decision2 - decision1)
data$id <- as.factor(1:nrow(data))
data$informationSource <- as.factor(data$informationSource)
ggplot(data, aes(x = update)) +
geom_histogram(binwidth = 5, fill = CSP_colors[1]) +
labs(title = "Distribution of updated probs",
x = "Updated probs.",
y = "Frequency")
long_data <- data %>%
pivot_longer(cols = starts_with("decision"),
names_to = "decisionType",
values_to = "probs",
values_drop_na = TRUE)
p1 <- ggplot(long_data, aes(x = informationSource, y = probs, fill = decisionType)) +
geom_boxplot() +
labs(title = "Probs. by information source and decision \n type",
x = "Information Source",
y = "Probs.")
ggsave("fig2.png", p1, width = 6, height = 4, dpi = 300)
p2 <- ggplot(data, aes(x = informationSource, y = update)) +
geom_boxplot(fill = CSP_colors[1]) +
labs(title = "Updated probs by information source",
x = "Information Source",
y = "Updated probs.")
ggsave("fig1.png", p2, width = 6, height = 4, dpi = 300)
data_direct <- data$update[data$informationSource == "direct"]
data_indirect <- data$update[data$informationSource == "indirect"]
t.test(data_direct, data_indirect, alternative = "greater")
cohen.d(data_direct, data_indirect)
library(effsize)
install.packages("effsize")
library(effsize)
cohen.d(data_direct, data_indirect)
installed.packages("pwr")
install.packages("pwr")
library(pwr)
pwr.t.test(d = 0.782, sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "greater")
library(pwr)
pwr.t.test(d = 0.782, sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "two.sided")
library(pwr)
pwr.t.test(d = 0.782, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
library(pwr)
pwr.t.test(d = 0.782, sig.level = 0.05, power = 0.8, type = "two.sample", alternative = "two.sided")
library(pwr)
pwr.t.test(d = 0.782, sig.level = 0.05, power = 0.8, type = "two.sample", alternative = "two.sided")
library(pwr)
pwr.t.test(d = 0.782, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "greater")
library(pwr)
pwr.t.test(d = 0.8, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "greater")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
install.packages("bayesfactor")
install.packages("BayesFactor")
data <- read.csv("../data/results.csv")
rm(list = ls())
options(warn = -1)
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggplot2)
library(aida)
library(BayesFactor)
theme_set(theme_aida())
##################################################
## CSP-colors
##################################################
CSP_colors = c(
"#7581B3", "#99C2C2", "#C65353", "#E2BA78", "#5C7457", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
# setting theme colors globally
scale_colour_discrete <- function(...) {
scale_colour_manual(..., values = CSP_colors)
}
scale_fill_discrete <- function(...) {
scale_fill_manual(..., values = CSP_colors)
}
data <- read.csv("../data/results.csv")
View(data)
data <- data %>% group_by(submission_id, informationSource) %>%
summarize(
decision1 = first(na.omit(decision1)),
decision2 = first(na.omit(decision2))
) %>%
mutate(update = decision2 - decision1)
View(data)
data$id <- as.factor(1:nrow(data))
data$informationSource <- as.factor(data$informationSource)
ggplot(data, aes(x = update)) +
geom_histogram(binwidth = 5, fill = CSP_colors[1]) +
labs(title = "Distribution of updated probs",
x = "Updated probs.",
y = "Frequency")
long_data <- data %>%
pivot_longer(cols = starts_with("decision"),
names_to = "decisionType",
values_to = "probs",
values_drop_na = TRUE)
p1 <- ggplot(long_data, aes(x = informationSource, y = probs, fill = decisionType)) +
geom_boxplot() +
labs(title = "Probs. by information source and decision \n type",
x = "Information Source",
y = "Probs.")
ggsave("fig1.png", p1, width = 6, height = 4, dpi = 300)
p2 <- ggplot(data, aes(x = informationSource, y = update)) +
geom_boxplot(fill = CSP_colors[1]) +
labs(title = "Updated probs by information source",
x = "Information Source",
y = "Updated probs.")
ggsave("fig2.png", p2, width = 6, height = 4, dpi = 300)
data_direct <- data$update[data$informationSource == "direct"]
data_indirect <- data$update[data$informationSource == "indirect"]
# Bayesian t-test
bf_test <- ttestBF(x = data_direct, y = data_indirect, alternative = "greater")
bf_test
shapiro.test(data$update)
# Extract posterior samples for Bayesian t-test
posterior_samples <- posterior(bf_test, iterations = 10000)
# Compute 95% credible interval
credible_interval <- quantile(posterior_samples, probs = c(0.025, 0.975))
credible_interval
plot(bf_test)
plot(posterior_samples)
?plot
data %>%
group_by(informationSource) %>%
summarise(
Mean = mean(update, na.rm = TRUE),
SD = sd(update, na.rm = TRUE),
N = n()
)
long_data %>%
group_by(informationSource, decisionType) %>%
summarise(
Mean = mean(probs, na.rm = TRUE),
SD = sd(probs, na.rm = TRUE),
N = n()
)
plot(bf_test)
bf_indirect <- ttestBF(x = data_indirect, mu = 0, alternative = "greater")
bf_indirect
bf_direct <- ttestBF(x = data_direct, mu = 0, alternative = "greater")
bf_direct
# Extract posterior samples for Bayesian t-test
posterior_samples_indirect <- posterior(bf_indirect, iterations = 10000)
# Compute 95% credible interval
credible_interval_indirect <- quantile(posterior_samples_indirect, probs = c(0.025, 0.975))
credible_interval_indirect
# Extract posterior samples for Bayesian t-test
posterior_samples_direct <- posterior(bf_direct, iterations = 10000)
# Compute 95% credible interval
credible_interval_direct <- quantile(posterior_samples_direct, probs = c(0.025, 0.975))
credible_interval_direct
data_decision1_direct <- data$decision1[data$informationSource == "direct"]
data_decision1_indirect <- data$decision1[data$informationSource == "indirect"]
bf_decision <- ttestBF(data_decision1_direct, data_decision1_indirect, alternative = "two.sided")
data_decision1_direct <- data$decision1[data$informationSource == "direct"]
data_decision1_indirect <- data$decision1[data$informationSource == "indirect"]
bf_decision <- ttestBF(data_decision1_direct, data_decision1_indirect, alternative = "two.sided")
bf_decision
pwr.t.test(d = 0.8, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "greater")
cohen.d(data_direct, data_indirect)
cohen.d(data_direct, data_indirect)
